/* soapH.h
   Generated by gSOAP 2.8.75 for blackJack.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

#ifdef SOAP_DEFAULT_byte
#define soap_default_byte(soap, a) (*(a) = SOAP_DEFAULT_byte)
#else
#define soap_default_byte(soap, a) (*(a) = (char)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_byte
#define soap_PUT_byte(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_byte
#define soap_PATCH_byte(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_byte
#define soap_POST_send_byte(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_byte
#define soap_GET_byte(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_byte(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_byte
#define soap_POST_recv_byte(soap, data) ( soap_read_byte(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

#ifdef SOAP_DEFAULT_int
#define soap_default_int(soap, a) (*(a) = SOAP_DEFAULT_int)
#else
#define soap_default_int(soap, a) (*(a) = (int)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_int(soap, data, "int", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_int
#define soap_PUT_int(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_int
#define soap_PATCH_int(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_int
#define soap_POST_send_int(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_int
#define soap_GET_int(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_int(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_int
#define soap_POST_recv_int(soap, data) ( soap_read_int(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

#ifdef SOAP_DEFAULT_unsignedInt
#define soap_default_unsignedInt(soap, a) (*(a) = SOAP_DEFAULT_unsignedInt)
#else
#define soap_default_unsignedInt(soap, a) (*(a) = (unsigned int)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_unsignedInt(soap, data, "unsignedInt", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_unsignedInt
#define soap_PUT_unsignedInt(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, data, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_unsignedInt
#define soap_PATCH_unsignedInt(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, data, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_unsignedInt
#define soap_POST_send_unsignedInt(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, data, "unsignedInt", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_unsignedInt
#define soap_GET_unsignedInt(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_unsignedInt(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_unsignedInt
#define soap_POST_recv_unsignedInt(soap, data) ( soap_read_unsignedInt(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_new_SOAP_ENV__Fault(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Fault
#define soap_PUT_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Fault
#define soap_PATCH_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Fault
#define soap_POST_send_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Fault(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Fault
#define soap_GET_SOAP_ENV__Fault(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Fault
#define soap_POST_recv_SOAP_ENV__Fault(soap, data) ( soap_read_SOAP_ENV__Fault(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_new_SOAP_ENV__Reason(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Reason
#define soap_PUT_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Reason
#define soap_PATCH_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Reason
#define soap_POST_send_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Reason
#define soap_GET_SOAP_ENV__Reason(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Reason
#define soap_POST_recv_SOAP_ENV__Reason(soap, data) ( soap_read_SOAP_ENV__Reason(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_new_SOAP_ENV__Detail(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Detail
#define soap_PUT_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Detail
#define soap_PATCH_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Detail
#define soap_POST_send_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Detail
#define soap_GET_SOAP_ENV__Detail(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Detail
#define soap_POST_recv_SOAP_ENV__Detail(soap, data) ( soap_read_SOAP_ENV__Detail(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_new_SOAP_ENV__Code(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Code
#define soap_PUT_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Code
#define soap_PATCH_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Code
#define soap_POST_send_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Code
#define soap_GET_SOAP_ENV__Code(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Code
#define soap_POST_recv_SOAP_ENV__Code(soap, data) ( soap_read_SOAP_ENV__Code(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_new_SOAP_ENV__Header(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Header
#define soap_PUT_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Header
#define soap_PATCH_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Header
#define soap_POST_send_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Header(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Header
#define soap_GET_SOAP_ENV__Header(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Header
#define soap_POST_recv_SOAP_ENV__Header(soap, data) ( soap_read_SOAP_ENV__Header(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef SOAP_TYPE_blackJackns__playerMove_DEFINED
#define SOAP_TYPE_blackJackns__playerMove_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_blackJackns__playerMove(struct soap*, struct blackJackns__playerMove *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_blackJackns__playerMove(struct soap*, const struct blackJackns__playerMove *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_blackJackns__playerMove(struct soap*, const char*, int, const struct blackJackns__playerMove *, const char*);
SOAP_FMAC3 struct blackJackns__playerMove * SOAP_FMAC4 soap_in_blackJackns__playerMove(struct soap*, const char*, struct blackJackns__playerMove *, const char*);

SOAP_FMAC3 struct blackJackns__playerMove * SOAP_FMAC4 soap_new_blackJackns__playerMove(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_blackJackns__playerMove(struct soap*, const struct blackJackns__playerMove *, const char*, const char*);

#ifndef soap_write_blackJackns__playerMove
#define soap_write_blackJackns__playerMove(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_blackJackns__playerMove(soap, data), 0) || soap_put_blackJackns__playerMove(soap, data, "blackJackns:playerMove", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_blackJackns__playerMove
#define soap_PUT_blackJackns__playerMove(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__playerMove(soap, data), 0) || soap_put_blackJackns__playerMove(soap, data, "blackJackns:playerMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_blackJackns__playerMove
#define soap_PATCH_blackJackns__playerMove(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__playerMove(soap, data), 0) || soap_put_blackJackns__playerMove(soap, data, "blackJackns:playerMove", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_blackJackns__playerMove
#define soap_POST_send_blackJackns__playerMove(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__playerMove(soap, data), 0) || soap_put_blackJackns__playerMove(soap, data, "blackJackns:playerMove", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct blackJackns__playerMove * SOAP_FMAC4 soap_get_blackJackns__playerMove(struct soap*, struct blackJackns__playerMove *, const char*, const char*);

#ifndef soap_read_blackJackns__playerMove
#define soap_read_blackJackns__playerMove(soap, data) ( ((data) ? (soap_default_blackJackns__playerMove(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_blackJackns__playerMove(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_blackJackns__playerMove
#define soap_GET_blackJackns__playerMove(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_blackJackns__playerMove(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_blackJackns__playerMove
#define soap_POST_recv_blackJackns__playerMove(soap, data) ( soap_read_blackJackns__playerMove(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_blackJackns__playerMoveResponse_DEFINED
#define SOAP_TYPE_blackJackns__playerMoveResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_blackJackns__playerMoveResponse(struct soap*, struct blackJackns__playerMoveResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_blackJackns__playerMoveResponse(struct soap*, const struct blackJackns__playerMoveResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_blackJackns__playerMoveResponse(struct soap*, const char*, int, const struct blackJackns__playerMoveResponse *, const char*);
SOAP_FMAC3 struct blackJackns__playerMoveResponse * SOAP_FMAC4 soap_in_blackJackns__playerMoveResponse(struct soap*, const char*, struct blackJackns__playerMoveResponse *, const char*);

SOAP_FMAC3 struct blackJackns__playerMoveResponse * SOAP_FMAC4 soap_new_blackJackns__playerMoveResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_blackJackns__playerMoveResponse(struct soap*, const struct blackJackns__playerMoveResponse *, const char*, const char*);

#ifndef soap_write_blackJackns__playerMoveResponse
#define soap_write_blackJackns__playerMoveResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_blackJackns__playerMoveResponse(soap, data), 0) || soap_put_blackJackns__playerMoveResponse(soap, data, "blackJackns:playerMoveResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_blackJackns__playerMoveResponse
#define soap_PUT_blackJackns__playerMoveResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__playerMoveResponse(soap, data), 0) || soap_put_blackJackns__playerMoveResponse(soap, data, "blackJackns:playerMoveResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_blackJackns__playerMoveResponse
#define soap_PATCH_blackJackns__playerMoveResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__playerMoveResponse(soap, data), 0) || soap_put_blackJackns__playerMoveResponse(soap, data, "blackJackns:playerMoveResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_blackJackns__playerMoveResponse
#define soap_POST_send_blackJackns__playerMoveResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__playerMoveResponse(soap, data), 0) || soap_put_blackJackns__playerMoveResponse(soap, data, "blackJackns:playerMoveResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct blackJackns__playerMoveResponse * SOAP_FMAC4 soap_get_blackJackns__playerMoveResponse(struct soap*, struct blackJackns__playerMoveResponse *, const char*, const char*);

#ifndef soap_read_blackJackns__playerMoveResponse
#define soap_read_blackJackns__playerMoveResponse(soap, data) ( ((data) ? (soap_default_blackJackns__playerMoveResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_blackJackns__playerMoveResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_blackJackns__playerMoveResponse
#define soap_GET_blackJackns__playerMoveResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_blackJackns__playerMoveResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_blackJackns__playerMoveResponse
#define soap_POST_recv_blackJackns__playerMoveResponse(soap, data) ( soap_read_blackJackns__playerMoveResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_blackJackns__getStatus_DEFINED
#define SOAP_TYPE_blackJackns__getStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_blackJackns__getStatus(struct soap*, struct blackJackns__getStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_blackJackns__getStatus(struct soap*, const struct blackJackns__getStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_blackJackns__getStatus(struct soap*, const char*, int, const struct blackJackns__getStatus *, const char*);
SOAP_FMAC3 struct blackJackns__getStatus * SOAP_FMAC4 soap_in_blackJackns__getStatus(struct soap*, const char*, struct blackJackns__getStatus *, const char*);

SOAP_FMAC3 struct blackJackns__getStatus * SOAP_FMAC4 soap_new_blackJackns__getStatus(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_blackJackns__getStatus(struct soap*, const struct blackJackns__getStatus *, const char*, const char*);

#ifndef soap_write_blackJackns__getStatus
#define soap_write_blackJackns__getStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_blackJackns__getStatus(soap, data), 0) || soap_put_blackJackns__getStatus(soap, data, "blackJackns:getStatus", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_blackJackns__getStatus
#define soap_PUT_blackJackns__getStatus(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__getStatus(soap, data), 0) || soap_put_blackJackns__getStatus(soap, data, "blackJackns:getStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_blackJackns__getStatus
#define soap_PATCH_blackJackns__getStatus(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__getStatus(soap, data), 0) || soap_put_blackJackns__getStatus(soap, data, "blackJackns:getStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_blackJackns__getStatus
#define soap_POST_send_blackJackns__getStatus(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__getStatus(soap, data), 0) || soap_put_blackJackns__getStatus(soap, data, "blackJackns:getStatus", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct blackJackns__getStatus * SOAP_FMAC4 soap_get_blackJackns__getStatus(struct soap*, struct blackJackns__getStatus *, const char*, const char*);

#ifndef soap_read_blackJackns__getStatus
#define soap_read_blackJackns__getStatus(soap, data) ( ((data) ? (soap_default_blackJackns__getStatus(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_blackJackns__getStatus(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_blackJackns__getStatus
#define soap_GET_blackJackns__getStatus(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_blackJackns__getStatus(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_blackJackns__getStatus
#define soap_POST_recv_blackJackns__getStatus(soap, data) ( soap_read_blackJackns__getStatus(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_blackJackns__getStatusResponse_DEFINED
#define SOAP_TYPE_blackJackns__getStatusResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_blackJackns__getStatusResponse(struct soap*, struct blackJackns__getStatusResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_blackJackns__getStatusResponse(struct soap*, const struct blackJackns__getStatusResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_blackJackns__getStatusResponse(struct soap*, const char*, int, const struct blackJackns__getStatusResponse *, const char*);
SOAP_FMAC3 struct blackJackns__getStatusResponse * SOAP_FMAC4 soap_in_blackJackns__getStatusResponse(struct soap*, const char*, struct blackJackns__getStatusResponse *, const char*);

SOAP_FMAC3 struct blackJackns__getStatusResponse * SOAP_FMAC4 soap_new_blackJackns__getStatusResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_blackJackns__getStatusResponse(struct soap*, const struct blackJackns__getStatusResponse *, const char*, const char*);

#ifndef soap_write_blackJackns__getStatusResponse
#define soap_write_blackJackns__getStatusResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_blackJackns__getStatusResponse(soap, data), 0) || soap_put_blackJackns__getStatusResponse(soap, data, "blackJackns:getStatusResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_blackJackns__getStatusResponse
#define soap_PUT_blackJackns__getStatusResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__getStatusResponse(soap, data), 0) || soap_put_blackJackns__getStatusResponse(soap, data, "blackJackns:getStatusResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_blackJackns__getStatusResponse
#define soap_PATCH_blackJackns__getStatusResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__getStatusResponse(soap, data), 0) || soap_put_blackJackns__getStatusResponse(soap, data, "blackJackns:getStatusResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_blackJackns__getStatusResponse
#define soap_POST_send_blackJackns__getStatusResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__getStatusResponse(soap, data), 0) || soap_put_blackJackns__getStatusResponse(soap, data, "blackJackns:getStatusResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct blackJackns__getStatusResponse * SOAP_FMAC4 soap_get_blackJackns__getStatusResponse(struct soap*, struct blackJackns__getStatusResponse *, const char*, const char*);

#ifndef soap_read_blackJackns__getStatusResponse
#define soap_read_blackJackns__getStatusResponse(soap, data) ( ((data) ? (soap_default_blackJackns__getStatusResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_blackJackns__getStatusResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_blackJackns__getStatusResponse
#define soap_GET_blackJackns__getStatusResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_blackJackns__getStatusResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_blackJackns__getStatusResponse
#define soap_POST_recv_blackJackns__getStatusResponse(soap, data) ( soap_read_blackJackns__getStatusResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_blackJackns__register_DEFINED
#define SOAP_TYPE_blackJackns__register_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_blackJackns__register(struct soap*, struct blackJackns__register *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_blackJackns__register(struct soap*, const struct blackJackns__register *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_blackJackns__register(struct soap*, const char*, int, const struct blackJackns__register *, const char*);
SOAP_FMAC3 struct blackJackns__register * SOAP_FMAC4 soap_in_blackJackns__register(struct soap*, const char*, struct blackJackns__register *, const char*);

SOAP_FMAC3 struct blackJackns__register * SOAP_FMAC4 soap_new_blackJackns__register(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_blackJackns__register(struct soap*, const struct blackJackns__register *, const char*, const char*);

#ifndef soap_write_blackJackns__register
#define soap_write_blackJackns__register(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_blackJackns__register(soap, data), 0) || soap_put_blackJackns__register(soap, data, "blackJackns:register", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_blackJackns__register
#define soap_PUT_blackJackns__register(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__register(soap, data), 0) || soap_put_blackJackns__register(soap, data, "blackJackns:register", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_blackJackns__register
#define soap_PATCH_blackJackns__register(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__register(soap, data), 0) || soap_put_blackJackns__register(soap, data, "blackJackns:register", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_blackJackns__register
#define soap_POST_send_blackJackns__register(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__register(soap, data), 0) || soap_put_blackJackns__register(soap, data, "blackJackns:register", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct blackJackns__register * SOAP_FMAC4 soap_get_blackJackns__register(struct soap*, struct blackJackns__register *, const char*, const char*);

#ifndef soap_read_blackJackns__register
#define soap_read_blackJackns__register(soap, data) ( ((data) ? (soap_default_blackJackns__register(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_blackJackns__register(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_blackJackns__register
#define soap_GET_blackJackns__register(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_blackJackns__register(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_blackJackns__register
#define soap_POST_recv_blackJackns__register(soap, data) ( soap_read_blackJackns__register(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_blackJackns__registerResponse_DEFINED
#define SOAP_TYPE_blackJackns__registerResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_blackJackns__registerResponse(struct soap*, struct blackJackns__registerResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_blackJackns__registerResponse(struct soap*, const struct blackJackns__registerResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_blackJackns__registerResponse(struct soap*, const char*, int, const struct blackJackns__registerResponse *, const char*);
SOAP_FMAC3 struct blackJackns__registerResponse * SOAP_FMAC4 soap_in_blackJackns__registerResponse(struct soap*, const char*, struct blackJackns__registerResponse *, const char*);

SOAP_FMAC3 struct blackJackns__registerResponse * SOAP_FMAC4 soap_new_blackJackns__registerResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_blackJackns__registerResponse(struct soap*, const struct blackJackns__registerResponse *, const char*, const char*);

#ifndef soap_write_blackJackns__registerResponse
#define soap_write_blackJackns__registerResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_blackJackns__registerResponse(soap, data), 0) || soap_put_blackJackns__registerResponse(soap, data, "blackJackns:registerResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_blackJackns__registerResponse
#define soap_PUT_blackJackns__registerResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__registerResponse(soap, data), 0) || soap_put_blackJackns__registerResponse(soap, data, "blackJackns:registerResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_blackJackns__registerResponse
#define soap_PATCH_blackJackns__registerResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__registerResponse(soap, data), 0) || soap_put_blackJackns__registerResponse(soap, data, "blackJackns:registerResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_blackJackns__registerResponse
#define soap_POST_send_blackJackns__registerResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__registerResponse(soap, data), 0) || soap_put_blackJackns__registerResponse(soap, data, "blackJackns:registerResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct blackJackns__registerResponse * SOAP_FMAC4 soap_get_blackJackns__registerResponse(struct soap*, struct blackJackns__registerResponse *, const char*, const char*);

#ifndef soap_read_blackJackns__registerResponse
#define soap_read_blackJackns__registerResponse(soap, data) ( ((data) ? (soap_default_blackJackns__registerResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_blackJackns__registerResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_blackJackns__registerResponse
#define soap_GET_blackJackns__registerResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_blackJackns__registerResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_blackJackns__registerResponse
#define soap_POST_recv_blackJackns__registerResponse(soap, data) ( soap_read_blackJackns__registerResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_blackJackns__tBlock_DEFINED
#define SOAP_TYPE_blackJackns__tBlock_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_blackJackns__tBlock(struct soap*, struct tBlock *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_blackJackns__tBlock(struct soap*, const struct tBlock *);

#define soap_blackJackns__tBlock2s soap_tBlock2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_blackJackns__tBlock(struct soap*, const char*, int, const struct tBlock *, const char*);

#define soap_s2blackJackns__tBlock soap_s2tBlock

SOAP_FMAC3 struct tBlock * SOAP_FMAC4 soap_in_blackJackns__tBlock(struct soap*, const char*, struct tBlock *, const char*);
#define soap_new_blackJackns__tBlock soap_new_tBlock

SOAP_FMAC3 int SOAP_FMAC4 soap_put_blackJackns__tBlock(struct soap*, const struct tBlock *, const char*, const char*);

#ifndef soap_write_blackJackns__tBlock
#define soap_write_blackJackns__tBlock(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_blackJackns__tBlock(soap, data), 0) || soap_put_blackJackns__tBlock(soap, data, "blackJackns:tBlock", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_blackJackns__tBlock
#define soap_PUT_blackJackns__tBlock(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__tBlock(soap, data), 0) || soap_put_blackJackns__tBlock(soap, data, "blackJackns:tBlock", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_blackJackns__tBlock
#define soap_PATCH_blackJackns__tBlock(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__tBlock(soap, data), 0) || soap_put_blackJackns__tBlock(soap, data, "blackJackns:tBlock", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_blackJackns__tBlock
#define soap_POST_send_blackJackns__tBlock(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__tBlock(soap, data), 0) || soap_put_blackJackns__tBlock(soap, data, "blackJackns:tBlock", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct tBlock * SOAP_FMAC4 soap_get_blackJackns__tBlock(struct soap*, struct tBlock *, const char*, const char*);

#ifndef soap_read_blackJackns__tBlock
#define soap_read_blackJackns__tBlock(soap, data) ( ((data) ? (soap_default_blackJackns__tBlock(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_blackJackns__tBlock(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_blackJackns__tBlock
#define soap_GET_blackJackns__tBlock(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_blackJackns__tBlock(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_blackJackns__tBlock
#define soap_POST_recv_blackJackns__tBlock(soap, data) ( soap_read_blackJackns__tBlock(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_tBlock_DEFINED
#define SOAP_TYPE_tBlock_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tBlock(struct soap*, struct tBlock *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tBlock(struct soap*, const struct tBlock *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tBlock(struct soap*, const char*, int, const struct tBlock *, const char*);
SOAP_FMAC3 struct tBlock * SOAP_FMAC4 soap_in_tBlock(struct soap*, const char*, struct tBlock *, const char*);

SOAP_FMAC3 struct tBlock * SOAP_FMAC4 soap_new_tBlock(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tBlock(struct soap*, const struct tBlock *, const char*, const char*);

#ifndef soap_write_tBlock
#define soap_write_tBlock(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tBlock(soap, data), 0) || soap_put_tBlock(soap, data, "tBlock", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_tBlock
#define soap_PUT_tBlock(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_tBlock(soap, data), 0) || soap_put_tBlock(soap, data, "tBlock", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_tBlock
#define soap_PATCH_tBlock(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_tBlock(soap, data), 0) || soap_put_tBlock(soap, data, "tBlock", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_tBlock
#define soap_POST_send_tBlock(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_tBlock(soap, data), 0) || soap_put_tBlock(soap, data, "tBlock", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct tBlock * SOAP_FMAC4 soap_get_tBlock(struct soap*, struct tBlock *, const char*, const char*);

#ifndef soap_read_tBlock
#define soap_read_tBlock(soap, data) ( ((data) ? (soap_default_tBlock(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_tBlock(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_tBlock
#define soap_GET_tBlock(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_tBlock(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_tBlock
#define soap_POST_recv_tBlock(soap, data) ( soap_read_tBlock(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_blackJackns__tDeck_DEFINED
#define SOAP_TYPE_blackJackns__tDeck_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_blackJackns__tDeck(struct soap*, struct tDeck *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_blackJackns__tDeck(struct soap*, const struct tDeck *);

#define soap_blackJackns__tDeck2s soap_tDeck2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_blackJackns__tDeck(struct soap*, const char*, int, const struct tDeck *, const char*);

#define soap_s2blackJackns__tDeck soap_s2tDeck

SOAP_FMAC3 struct tDeck * SOAP_FMAC4 soap_in_blackJackns__tDeck(struct soap*, const char*, struct tDeck *, const char*);
#define soap_new_blackJackns__tDeck soap_new_tDeck

SOAP_FMAC3 int SOAP_FMAC4 soap_put_blackJackns__tDeck(struct soap*, const struct tDeck *, const char*, const char*);

#ifndef soap_write_blackJackns__tDeck
#define soap_write_blackJackns__tDeck(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_blackJackns__tDeck(soap, data), 0) || soap_put_blackJackns__tDeck(soap, data, "blackJackns:tDeck", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_blackJackns__tDeck
#define soap_PUT_blackJackns__tDeck(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__tDeck(soap, data), 0) || soap_put_blackJackns__tDeck(soap, data, "blackJackns:tDeck", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_blackJackns__tDeck
#define soap_PATCH_blackJackns__tDeck(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__tDeck(soap, data), 0) || soap_put_blackJackns__tDeck(soap, data, "blackJackns:tDeck", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_blackJackns__tDeck
#define soap_POST_send_blackJackns__tDeck(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__tDeck(soap, data), 0) || soap_put_blackJackns__tDeck(soap, data, "blackJackns:tDeck", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct tDeck * SOAP_FMAC4 soap_get_blackJackns__tDeck(struct soap*, struct tDeck *, const char*, const char*);

#ifndef soap_read_blackJackns__tDeck
#define soap_read_blackJackns__tDeck(soap, data) ( ((data) ? (soap_default_blackJackns__tDeck(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_blackJackns__tDeck(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_blackJackns__tDeck
#define soap_GET_blackJackns__tDeck(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_blackJackns__tDeck(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_blackJackns__tDeck
#define soap_POST_recv_blackJackns__tDeck(soap, data) ( soap_read_blackJackns__tDeck(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_tDeck_DEFINED
#define SOAP_TYPE_tDeck_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tDeck(struct soap*, struct tDeck *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tDeck(struct soap*, const struct tDeck *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tDeck(struct soap*, const char*, int, const struct tDeck *, const char*);
SOAP_FMAC3 struct tDeck * SOAP_FMAC4 soap_in_tDeck(struct soap*, const char*, struct tDeck *, const char*);

SOAP_FMAC3 struct tDeck * SOAP_FMAC4 soap_new_tDeck(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tDeck(struct soap*, const struct tDeck *, const char*, const char*);

#ifndef soap_write_tDeck
#define soap_write_tDeck(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tDeck(soap, data), 0) || soap_put_tDeck(soap, data, "tDeck", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_tDeck
#define soap_PUT_tDeck(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_tDeck(soap, data), 0) || soap_put_tDeck(soap, data, "tDeck", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_tDeck
#define soap_PATCH_tDeck(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_tDeck(soap, data), 0) || soap_put_tDeck(soap, data, "tDeck", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_tDeck
#define soap_POST_send_tDeck(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_tDeck(soap, data), 0) || soap_put_tDeck(soap, data, "tDeck", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct tDeck * SOAP_FMAC4 soap_get_tDeck(struct soap*, struct tDeck *, const char*, const char*);

#ifndef soap_read_tDeck
#define soap_read_tDeck(soap, data) ( ((data) ? (soap_default_tDeck(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_tDeck(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_tDeck
#define soap_GET_tDeck(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_tDeck(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_tDeck
#define soap_POST_recv_tDeck(soap, data) ( soap_read_tDeck(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_blackJackns__tMessage_DEFINED
#define SOAP_TYPE_blackJackns__tMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_blackJackns__tMessage(struct soap*, struct tMessage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_blackJackns__tMessage(struct soap*, const struct tMessage *);

#define soap_blackJackns__tMessage2s soap_tMessage2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_blackJackns__tMessage(struct soap*, const char*, int, const struct tMessage *, const char*);

#define soap_s2blackJackns__tMessage soap_s2tMessage

SOAP_FMAC3 struct tMessage * SOAP_FMAC4 soap_in_blackJackns__tMessage(struct soap*, const char*, struct tMessage *, const char*);
#define soap_new_blackJackns__tMessage soap_new_tMessage

SOAP_FMAC3 int SOAP_FMAC4 soap_put_blackJackns__tMessage(struct soap*, const struct tMessage *, const char*, const char*);

#ifndef soap_write_blackJackns__tMessage
#define soap_write_blackJackns__tMessage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_blackJackns__tMessage(soap, data), 0) || soap_put_blackJackns__tMessage(soap, data, "blackJackns:tMessage", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_blackJackns__tMessage
#define soap_PUT_blackJackns__tMessage(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__tMessage(soap, data), 0) || soap_put_blackJackns__tMessage(soap, data, "blackJackns:tMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_blackJackns__tMessage
#define soap_PATCH_blackJackns__tMessage(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__tMessage(soap, data), 0) || soap_put_blackJackns__tMessage(soap, data, "blackJackns:tMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_blackJackns__tMessage
#define soap_POST_send_blackJackns__tMessage(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_blackJackns__tMessage(soap, data), 0) || soap_put_blackJackns__tMessage(soap, data, "blackJackns:tMessage", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct tMessage * SOAP_FMAC4 soap_get_blackJackns__tMessage(struct soap*, struct tMessage *, const char*, const char*);

#ifndef soap_read_blackJackns__tMessage
#define soap_read_blackJackns__tMessage(soap, data) ( ((data) ? (soap_default_blackJackns__tMessage(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_blackJackns__tMessage(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_blackJackns__tMessage
#define soap_GET_blackJackns__tMessage(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_blackJackns__tMessage(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_blackJackns__tMessage
#define soap_POST_recv_blackJackns__tMessage(soap, data) ( soap_read_blackJackns__tMessage(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_tMessage_DEFINED
#define SOAP_TYPE_tMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_tMessage(struct soap*, struct tMessage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_tMessage(struct soap*, const struct tMessage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_tMessage(struct soap*, const char*, int, const struct tMessage *, const char*);
SOAP_FMAC3 struct tMessage * SOAP_FMAC4 soap_in_tMessage(struct soap*, const char*, struct tMessage *, const char*);

SOAP_FMAC3 struct tMessage * SOAP_FMAC4 soap_new_tMessage(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_tMessage(struct soap*, const struct tMessage *, const char*, const char*);

#ifndef soap_write_tMessage
#define soap_write_tMessage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_tMessage(soap, data), 0) || soap_put_tMessage(soap, data, "tMessage", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_tMessage
#define soap_PUT_tMessage(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_tMessage(soap, data), 0) || soap_put_tMessage(soap, data, "tMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_tMessage
#define soap_PATCH_tMessage(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_tMessage(soap, data), 0) || soap_put_tMessage(soap, data, "tMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_tMessage
#define soap_POST_send_tMessage(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_tMessage(soap, data), 0) || soap_put_tMessage(soap, data, "tMessage", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct tMessage * SOAP_FMAC4 soap_get_tMessage(struct soap*, struct tMessage *, const char*, const char*);

#ifndef soap_read_tMessage
#define soap_read_tMessage(soap, data) ( ((data) ? (soap_default_tMessage(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_tMessage(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_tMessage
#define soap_GET_tMessage(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_tMessage(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_tMessage
#define soap_POST_recv_tMessage(soap, data) ( soap_read_tMessage(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerToblackJackns__tBlock_DEFINED
#define SOAP_TYPE_PointerToblackJackns__tBlock_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToblackJackns__tBlock(struct soap*, struct tBlock *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToblackJackns__tBlock(struct soap*, const char *, int, struct tBlock *const*, const char *);
SOAP_FMAC3 struct tBlock ** SOAP_FMAC4 soap_in_PointerToblackJackns__tBlock(struct soap*, const char*, struct tBlock **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToblackJackns__tBlock(struct soap*, struct tBlock *const*, const char*, const char*);
SOAP_FMAC3 struct tBlock ** SOAP_FMAC4 soap_get_PointerToblackJackns__tBlock(struct soap*, struct tBlock **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedInt_DEFINED
#define SOAP_TYPE_PointerTounsignedInt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedInt(struct soap*, unsigned int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedInt(struct soap*, const char *, int, unsigned int *const*, const char *);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_in_PointerTounsignedInt(struct soap*, const char*, unsigned int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedInt(struct soap*, unsigned int *const*, const char*, const char*);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_get_PointerTounsignedInt(struct soap*, unsigned int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_xsd__string_DEFINED
#define SOAP_TYPE_xsd__string_DEFINED

#ifdef SOAP_DEFAULT_xsd__string
#define soap_default_xsd__string(soap, a) (*(a) = SOAP_DEFAULT_xsd__string)
#else
#define soap_default_xsd__string(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap*, char *const*);

#define soap_xsd__string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, char **, const char*);
#define soap_new_xsd__string soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_xsd__string(soap, data, "xsd:string", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_xsd__string
#define soap_PUT_xsd__string(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__string(soap, data, "xsd:string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_xsd__string
#define soap_PATCH_xsd__string(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__string(soap, data, "xsd:string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_xsd__string
#define soap_POST_send_xsd__string(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__string(soap, data, "xsd:string", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_xsd__string
#define soap_GET_xsd__string(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_xsd__string(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_xsd__string
#define soap_POST_recv_xsd__string(soap, data) ( soap_read_xsd__string(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

#ifdef SOAP_DEFAULT__QName
#define soap_default__QName(soap, a) (*(a) = SOAP_DEFAULT__QName)
#else
#define soap_default__QName(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__QName
#define soap_PUT__QName(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__QName
#define soap_PATCH__QName(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__QName
#define soap_POST_send__QName(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET__QName
#define soap_GET__QName(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read__QName(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv__QName
#define soap_POST_recv__QName(soap, data) ( soap_read__QName(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

#ifdef SOAP_DEFAULT_string
#define soap_default_string(soap, a) (*(a) = SOAP_DEFAULT_string)
#else
#define soap_default_string(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_string(soap, data, "string", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_string
#define soap_PUT_string(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_string
#define soap_PATCH_string(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_string
#define soap_POST_send_string(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_string
#define soap_GET_string(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_string(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_string
#define soap_POST_recv_string(soap, data) ( soap_read_string(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifdef __cplusplus
}
#endif

#endif

/* End of soapH.h */
